//! Example: Bob sponsors gas for Alice to transfer ETH to Dave using EIP-7702

use alloy::{
    eips::eip7702::{Authorization, SignedAuthorization},
    network::{TransactionBuilder, TransactionBuilder7702},
    node_bindings::Anvil,
    primitives::{Address, U256, keccak256},
    providers::{Provider, ProviderBuilder},
    rpc::types::TransactionRequest,
    signers::{Signer, SignerSync, local::PrivateKeySigner},
    sol,
};

use alloy::dyn_abi::DynSolValue;

// Codegen from embedded Solidity code and precompiled bytecode.
sol!(
    #[allow(missing_docs)]
    #[sol(rpc, bytecode = "0x6080604052348015600e575f5ffd5b506112108061001c5f395ff3fe608060405260043610610037575f3560e01c80633f707e6b1461003a5780636171d1c914610056578063affed0e01461007257610038565b5b005b610054600480360381019061004f9190610869565b61009c565b005b610070600480360381019061006b9190610909565b610118565b005b34801561007d575f5ffd5b506100866102fc565b604051610093919061099f565b60405180910390f35b3073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461010a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161010190610a12565b60405180910390fd5b6101148282610301565b5050565b60605f5f90505b858590508110156101f0578186868381811061013e5761013d610a30565b5b90506020028101906101509190610a69565b5f0160208101906101619190610aea565b87878481811061017457610173610a30565b5b90506020028101906101869190610a69565b6020013588888581811061019d5761019c610a30565b5b90506020028101906101af9190610a69565b80604001906101be9190610b15565b6040516020016101d2959493929190610c60565b6040516020818303038152906040529150808060010191505061011f565b505f5f5482604051602001610206929190610ca7565b6040516020818303038152906040528051906020012090505f610228826103a6565b90505f6102788287878080601f0160208091040260200160405190810160405280939291908181526020018383808284375f81840152601f19601f820116905080830192505050505050506103d9565b90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146102e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102df90610d18565b60405180910390fd5b6102f28888610301565b5050505050505050565b5f5481565b5f5f5490505f5f81548092919061031790610d63565b91905055505f5f90505b838390508110156103665761035984848381811061034257610341610a30565b5b90506020028101906103549190610a69565b610403565b8080600101915050610321565b50807f280bb3599696acbf79fb8ffcde81a57337b52500f789600fbb1cff9b4cbaba398484604051610399929190611010565b60405180910390a2505050565b5f7f19457468657265756d205369676e6564204d6573736167653a0a3332000000005f5281601c52603c5f209050919050565b5f5f5f5f6103e78686610562565b9250925092506103f782826105b7565b82935050505092915050565b5f815f0160208101906104169190610aea565b73ffffffffffffffffffffffffffffffffffffffff1682602001358380604001906104419190610b15565b60405161044f929190611032565b5f6040518083038185875af1925050503d805f8114610489576040519150601f19603f3d011682016040523d82523d5f602084013e61048e565b606091505b50509050806104d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104c990611094565b60405180910390fd5b815f0160208101906104e49190610aea565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fed7e8f919df9cc0d0ad8b4057d084ebf319b630564d5da283e14751adc931f3a84602001358580604001906105479190610b15565b604051610556939291906110ee565b60405180910390a35050565b5f5f5f60418451036105a2575f5f5f602087015192506040870151915060608701515f1a905061059488828585610719565b9550955095505050506105b0565b5f600285515f1b9250925092505b9250925092565b5f60038111156105ca576105c961111e565b5b8260038111156105dd576105dc61111e565b5b031561071557600160038111156105f7576105f661111e565b5b82600381111561060a5761060961111e565b5b03610641576040517ff645eedf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260038111156106555761065461111e565b5b8260038111156106685761066761111e565b5b036106ac57805f1c6040517ffce698f70000000000000000000000000000000000000000000000000000000081526004016106a3919061099f565b60405180910390fd5b6003808111156106bf576106be61111e565b5b8260038111156106d2576106d161111e565b5b0361071457806040517fd78bce0c00000000000000000000000000000000000000000000000000000000815260040161070b9190611163565b60405180910390fd5b5b5050565b5f5f5f7f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0845f1c1115610755575f6003859250925092506107f6565b5f6001888888886040515f81526020016040526040516107789493929190611197565b6020604051602081039080840390855afa158015610798573d5f5f3e3d5ffd5b5050506020604051035190505f73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036107e9575f60015f5f1b935093509350506107f6565b805f5f5f1b935093509350505b9450945094915050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83601f84011261082957610828610808565b5b8235905067ffffffffffffffff8111156108465761084561080c565b5b60208301915083602082028301111561086257610861610810565b5b9250929050565b5f5f6020838503121561087f5761087e610800565b5b5f83013567ffffffffffffffff81111561089c5761089b610804565b5b6108a885828601610814565b92509250509250929050565b5f5f83601f8401126108c9576108c8610808565b5b8235905067ffffffffffffffff8111156108e6576108e561080c565b5b60208301915083600182028301111561090257610901610810565b5b9250929050565b5f5f5f5f6040858703121561092157610920610800565b5b5f85013567ffffffffffffffff81111561093e5761093d610804565b5b61094a87828801610814565b9450945050602085013567ffffffffffffffff81111561096d5761096c610804565b5b610979878288016108b4565b925092505092959194509250565b5f819050919050565b61099981610987565b82525050565b5f6020820190506109b25f830184610990565b92915050565b5f82825260208201905092915050565b7f496e76616c696420617574686f726974790000000000000000000000000000005f82015250565b5f6109fc6011836109b8565b9150610a07826109c8565b602082019050919050565b5f6020820190508181035f830152610a29816109f0565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f5ffd5b5f5ffd5b5f5ffd5b5f82356001606003833603038112610a8457610a83610a5d565b5b80830191505092915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610ab982610a90565b9050919050565b610ac981610aaf565b8114610ad3575f5ffd5b50565b5f81359050610ae481610ac0565b92915050565b5f60208284031215610aff57610afe610800565b5b5f610b0c84828501610ad6565b91505092915050565b5f5f83356001602003843603038112610b3157610b30610a5d565b5b80840192508235915067ffffffffffffffff821115610b5357610b52610a61565b5b602083019250600182023603831315610b6f57610b6e610a65565b5b509250929050565b5f81519050919050565b5f81905092915050565b8281835e5f83830152505050565b5f610ba382610b77565b610bad8185610b81565b9350610bbd818560208601610b8b565b80840191505092915050565b5f8160601b9050919050565b5f610bdf82610bc9565b9050919050565b5f610bf082610bd5565b9050919050565b610c08610c0382610aaf565b610be6565b82525050565b5f819050919050565b610c28610c2382610987565b610c0e565b82525050565b828183375f83830152505050565b5f610c478385610b81565b9350610c54838584610c2e565b82840190509392505050565b5f610c6b8288610b99565b9150610c778287610bf7565b601482019150610c878286610c17565b602082019150610c98828486610c3c565b91508190509695505050505050565b5f610cb28285610c17565b602082019150610cc28284610b99565b91508190509392505050565b7f496e76616c6964207369676e61747572650000000000000000000000000000005f82015250565b5f610d026011836109b8565b9150610d0d82610cce565b602082019050919050565b5f6020820190508181035f830152610d2f81610cf6565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610d6d82610987565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d9f57610d9e610d36565b5b600182019050919050565b5f82825260208201905092915050565b5f819050919050565b5f610dd16020840184610ad6565b905092915050565b610de281610aaf565b82525050565b610df181610987565b8114610dfb575f5ffd5b50565b5f81359050610e0c81610de8565b92915050565b5f610e206020840184610dfe565b905092915050565b610e3181610987565b82525050565b5f5ffd5b5f5ffd5b5f5ffd5b5f5f83356001602003843603038112610e5f57610e5e610e3f565b5b83810192508235915060208301925067ffffffffffffffff821115610e8757610e86610e37565b5b600182023603831315610e9d57610e9c610e3b565b5b509250929050565b5f82825260208201905092915050565b5f601f19601f8301169050919050565b5f610ed08385610ea5565b9350610edd838584610c2e565b610ee683610eb5565b840190509392505050565b5f60608301610f025f840184610dc3565b610f0e5f860182610dd9565b50610f1c6020840184610e12565b610f296020860182610e28565b50610f376040840184610e43565b8583036040870152610f4a838284610ec5565b925050508091505092915050565b5f610f638383610ef1565b905092915050565b5f82356001606003833603038112610f8657610f85610e3f565b5b82810191505092915050565b5f602082019050919050565b5f610fa98385610daa565b935083602084028501610fbb84610dba565b805f5b87811015610ffe578484038952610fd58284610f6b565b610fdf8582610f58565b9450610fea83610f92565b925060208a01995050600181019050610fbe565b50829750879450505050509392505050565b5f6020820190508181035f830152611029818486610f9e565b90509392505050565b5f61103e828486610c3c565b91508190509392505050565b7f43616c6c207265766572746564000000000000000000000000000000000000005f82015250565b5f61107e600d836109b8565b91506110898261104a565b602082019050919050565b5f6020820190508181035f8301526110ab81611072565b9050919050565b5f82825260208201905092915050565b5f6110cd83856110b2565b93506110da838584610c2e565b6110e383610eb5565b840190509392505050565b5f6040820190506111015f830186610990565b81810360208301526111148184866110c2565b9050949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b5f819050919050565b61115d8161114b565b82525050565b5f6020820190506111765f830184611154565b92915050565b5f60ff82169050919050565b6111918161117c565b82525050565b5f6080820190506111aa5f830187611154565b6111b76020830186611188565b6111c46040830185611154565b6111d16060830184611154565b9594505050505056fea264697066735822122073bb7a0973c5bac29900a0c5cca633ece12b0e9a589d5c9475f71bdba58478aa64736f6c634300081d0033")]
    contract BatchCallAndSponsor {
        using ECDSA for bytes32;

        /// @notice A nonce used for replay protection.
        uint256 public nonce;

        /// @notice Represents a single call within a batch.
        struct Call {
            address to;
            uint256 value;
            bytes data;
        }

        /// @notice Emitted for every individual call executed.
        event CallExecuted(address indexed sender, address indexed to, uint256 value, bytes data);
        /// @notice Emitted when a full batch is executed.
        event BatchExecuted(uint256 indexed nonce, Call[] calls);

        /**
         * @notice Executes a batch of calls using an off–chain signature.
         * @param calls An array of Call structs containing destination, ETH value, and calldata.
         * @param signature The ECDSA signature over the current nonce and the call data.
         *
         * The signature must be produced off–chain by signing:
         * The signing key should be the account's key (which becomes the smart account's own identity after upgrade).
         */
        function execute(Call[] calldata calls, bytes calldata signature) external payable {
            // Compute the digest that the account was expected to sign.
            bytes memory encodedCalls;
            for (uint256 i = 0; i < calls.length; i++) {
                encodedCalls = abi.encodePacked(encodedCalls, calls[i].to, calls[i].value, calls[i].data);
            }
            bytes32 digest = keccak256(abi.encodePacked(nonce, encodedCalls));

            bytes32 ethSignedMessageHash = MessageHashUtils.toEthSignedMessageHash(digest);

            // Recover the signer from the provided signature.
            address recovered = ECDSA.recover(ethSignedMessageHash, signature);
            require(recovered == address(this), "Invalid signature");

            _executeBatch(calls);
        }

        /**
         * @notice Executes a batch of calls directly.
         * @dev This function is intended for use when the smart account itself (i.e. address(this))
         * calls the contract. It checks that msg.sender is the contract itself.
         * @param calls An array of Call structs containing destination, ETH value, and calldata.
         */
        function execute(Call[] calldata calls) external payable {
            require(msg.sender == address(this), "Invalid authority");
            _executeBatch(calls);
        }

        /**
         * @dev Internal function that handles batch execution and nonce incrementation.
         * @param calls An array of Call structs.
         */
        function _executeBatch(Call[] calldata calls) internal {
            uint256 currentNonce = nonce;
            nonce++; // Increment nonce to protect against replay attacks

            for (uint256 i = 0; i < calls.length; i++) {
                _executeCall(calls[i]);
            }

            emit BatchExecuted(currentNonce, calls);
        }

        /**
         * @dev Internal function to execute a single call.
         * @param callItem The Call struct containing destination, value, and calldata.
         */
        function _executeCall(Call calldata callItem) internal {
            (bool success,) = callItem.to.call{value: callItem.value}(callItem.data);
            require(success, "Call reverted");
            emit CallExecuted(msg.sender, callItem.to, callItem.value, callItem.data);
        }

        // Allow the contract to receive ETH (e.g. from DEX swaps or other transfers).
        fallback() external payable {}
        receive() external payable {}
    }

);

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    // Spin up a forked Anvil node.
    // Ensure `anvil` is available in $PATH.
    let anvil = Anvil::new().arg("--hardfork").arg("prague").try_spawn()?;

    // Create three users: Alice, Bob (sponsor), and Dave
    let bob: PrivateKeySigner = anvil.keys()[0].clone().into();
    let alice1: PrivateKeySigner = anvil.keys()[1].clone().into();
    let dave1: PrivateKeySigner = anvil.keys()[2].clone().into();

    let rpc_url = anvil.endpoint_url();
    let provider = ProviderBuilder::new()
        .wallet(bob.clone())
        .connect_http(rpc_url.clone());

    // Deploy the `SimpleTransfer` contract.
    let contract = BatchCallAndSponsor::deploy(provider.clone()).await?;

    // Get initial balances
    let bob_balance_before = provider.get_balance(bob.address()).await?;
    let alice1_balance_before = provider.get_balance(alice1.address()).await?;
    let dave1_balance_before = provider.get_balance(dave1.address()).await?;
    // let alice2_balance_before = provider.get_balance(alice2.address()).await?;
    // let dave2_balance_before = provider.get_balance(dave2.address()).await?;

    println!("Bob balance before: {}", bob_balance_before);
    println!("Alice1 balance before: {}", alice1_balance_before);
    println!("Dave1 balance before: {}", dave1_balance_before);

    // Create the batch calls for ETH transfers

    // Get final balances
    let bob_balance_after = provider.get_balance(bob.address()).await?;
    let alice1_balance_after = provider.get_balance(alice1.address()).await?;
    let dave1_balance_after = provider.get_balance(dave1.address()).await?;

    println!("Bob balance after: {}", bob_balance_after);
    println!("Alice1 balance after: {}", alice1_balance_after);
    println!("Dave1 balance after: {}", dave1_balance_after);

    Ok(())
}
